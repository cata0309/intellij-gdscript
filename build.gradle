import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.9'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'antlr'
    id 'de.undercouch.download' version '4.0.0'
}

group 'godot'
version '0.1'

wrapper {
    gradleVersion = '5.2.1'
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

intellij {
    version = "2018.3"
    downloadSources = true
    updateSinceUntilBuild = false
}

repositories {
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.7.2'
    compile 'com.yuvalshavit:antlr-denter:1.1'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.9'
    implementation 'org.antlr:antlr4-intellij-adaptor:0.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

def generatedJavaLocation = "src/main/java-gen"
def generatedResourceLocation = "src/main/resources-gen"

sourceSets {
    main {
        java {
            srcDirs += generatedJavaLocation
        }
        resources {
            srcDirs += generatedResourceLocation
        }
    }
}

compileKotlin.dependsOn generateGrammarSource

generateGrammarSource {
    def pckg = "plugin/parser/grammar"
    outputDirectory = file("$generatedJavaLocation/$pckg")
    arguments += [
        "-package", pckg.replace("/", "."),
        "-no-listener",
        "-no-visitor"
    ]
}

tasks.register("updateDocs") {
    group = "other"
    description = "Update Godot API XML files (used for code completion)"
    doLast {
        def owner = "godotengine"
        def repo = "godot"
        def docs = "doc/classes"
        def address = "https://api.github.com/repos/$owner/$repo/contents/$docs"
        def contentsFile = file("$buildDir/contents.json")
        download {
            src address
            dest contentsFile
        }
        def contents = new JsonSlurper().parseFile(contentsFile, "utf-8")
        contentsFile.delete()
        def urls = contents.collect { it.download_url }
        download {
            src urls
            dest file("$generatedResourceLocation/docs")
        }
    }
}
