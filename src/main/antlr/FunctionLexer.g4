lexer grammar FunctionLexer;

FUNCTION
    : 'abs'
    | 'acos'
    | 'asin'
    | 'assert'
    | 'atan'
    | 'atan2'
    | 'bytes2var'
    | 'cartesian2polar'
    | 'ceil'
    | 'char'
    | 'clamp'
    | 'convert'
    | 'cos'
    | 'cosh'
    | 'db2linear'
    | 'decimals'
    | 'dectime'
    | 'deg2rad'
    | 'dict2inst'
    | 'ease'
    | 'exp'
    | 'floor'
    | 'fmod'
    | 'fposmod'
    | 'funcref'
    | 'get_stack'
    | 'hash'
    | 'inst2dict'
    | 'instance_from_id'
    | 'inverse_lerp'
    | 'is_equal_approx'
    | 'is_inf'
    | 'is_instance_valid'
    | 'is_nan'
    | 'is_zero_approx'
    | 'len'
    | 'lerp'
    | 'lerp_angle'
    | 'linear2db'
    | 'load'
    | 'log'
    | 'max'
    | 'min'
    | 'move_toward'
    | 'nearest_po2'
    | 'ord'
    | 'parse_json'
    | 'polar2cartesian'
    | 'posmod'
    | 'pow'
    | 'preload'
    | 'print'
    | 'print_debug'
    | 'print_stack'
    | 'printerr'
    | 'printraw'
    | 'prints'
    | 'printt'
    | 'push_error'
    | 'push_warning'
    | 'rad2deg'
    | 'rand_range'
    | 'rand_seed'
    | 'randf'
    | 'randi'
    | 'randomize'
    | 'range'
    | 'range_lerp'
    | 'round'
    | 'seed'
    | 'sign'
    | 'sin'
    | 'sinh'
    | 'smoothstep'
    | 'sqrt'
    | 'step_decimals'
    | 'stepify'
    | 'str'
    | 'str2var'
    | 'tan'
    | 'tanh'
    | 'to_json'
    | 'type_exists'
    | 'typeof'
    | 'validate_json'
    | 'var2bytes'
    | 'var2str'
    | 'weakref'
    | 'wrapf'
    | 'wrapi'
    | 'yield'
    ;