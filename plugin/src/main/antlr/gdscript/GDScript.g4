grammar GDScript;

@header {package gdscript;}

file: NL* (statement NL+)* EOF;

statement: var_statement | const_statement | func_statement | for_statement | while_statement | class_statement | extends_statement | class_name_statement | enum_statement | if_statement | elif_statement | else_statement | return_statement | signal_statement | assign_statement | match_statement | match_entry_statement | expression | PASS | BREAK | CONTINUE | TOOL | LINE_COMMENT;
var_statement: (EXPORT (PARENTHES_LEFT export_argument? (COMMA export_argument)* PARENTHES_RIGHT)?)? ONREADY? VAR IDENTIFIER (COLON type)? (ASSIGN expression)? (SETGET IDENTIFIER? (COMMA IDENTIFIER)?)?;
export_argument: IDENTIFIER | number | string | type;
const_statement: CONST IDENTIFIER (COLON type)? ASSIGN expression;
func_statement: STATIC? FUNC IDENTIFIER PARENTHES_LEFT func_argument? (COMMA func_argument)* PARENTHES_RIGHT (ARROW type)? COLON;
func_argument: IDENTIFIER (COLON type)?;
for_statement: FOR expression COLON;
while_statement: WHILE expression COLON;
class_statement: CLASS IDENTIFIER COLON;
extends_statement: EXTENDS (type | string) (DOT type)*;
class_name_statement: CLASS_NAME IDENTIFIER;
enum_statement: ENUM IDENTIFIER? BRACE_LEFT NL* enum_entry (COMMA NL* enum_entry)* BRACE_RIGHT;
enum_entry: IDENTIFIER (ASSIGN number)? NL*;
if_statement: IF expression COLON statement?;
elif_statement: ELIF expression COLON statement?;
else_statement: ELSE COLON statement?;
return_statement: RETURN expression;
signal_statement: SIGNAL IDENTIFIER;
assign_statement: expression (ASSIGN | ASSIGN_SPECIAL) expression;
match_statement: MATCH expression COLON;
match_entry_statement: expression COLON;

expression: value ((OPERATION_SIGN | AND | OR | IN | IS | AS | MINUS | DOT | IF | ELSE) value)*;
value: (MINUS | NOT | NEGATE)? (IDENTIFIER | NODE | TRUE | FALSE | SELF | NULL | number | string | array | dictionary | dictionary_lua | invoke | subscribe | in_braces | type);

array: BRACKET_LEFT expression? (COMMA expression)* BRACKET_RIGHT;
dictionary: BRACE_LEFT NL* dictionary_entry? (COMMA NL* dictionary_entry)* BRACE_RIGHT;
dictionary_entry: (string | number) COLON expression NL*;
dictionary_lua: BRACE_LEFT NL* dictionary_lua_entry? (COMMA NL* dictionary_lua_entry)* BRACE_RIGHT;
dictionary_lua_entry: IDENTIFIER ASSIGN expression NL*;
invoke: (IDENTIFIER | primitive) PARENTHES_LEFT expression? (COMMA expression)* PARENTHES_RIGHT;
subscribe: IDENTIFIER BRACKET_LEFT expression BRACKET_RIGHT;
in_braces: PARENTHES_LEFT expression PARENTHES_RIGHT;
type: IDENTIFIER | primitive;
string: STRING | STRING_MULTILINE | STRING_APHOSTROPHE;
primitive: BOOL | INT | FLOAT | VOID;
number: NUMBER_FLOATING | NUMBER_BINARY | NUMBER_HEXADECIMAL;

MATCH: 'match';
EXPORT: 'export';
ONREADY: 'onready';
VAR: 'var';
SETGET: 'setget';
CONST: 'const';
STATIC: 'static';
FUNC: 'func';
FOR: 'for';
WHILE: 'while';
CLASS: 'class';
EXTENDS: 'extends';
CLASS_NAME: 'class_name';
ENUM: 'enum';
IF: 'if';
ELIF: 'elif';
ELSE: 'else';
RETURN: 'return';
PASS: 'pass';
TOOL: 'tool';
SIGNAL: 'signal';
BREAK: 'break';
CONTINUE: 'continue';
ASSIGN_SPECIAL: '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=';
ASSIGN: '=';
ARROW: '->';
OPERATION_SIGN: '~' | '*' | '/' | '%' | '+' | '<<' | '>>' | '&' | '^' | '|' | '<' | '>' | '==' | '!=' | '>=' | '<=' | '&&' | '||';
NEGATE: '!';
NOT: 'not';
AND: 'and';
OR: 'or';
IN: 'in';
IS: 'is';
AS: 'as';
SELF: 'self';
NULL: 'null';
TRUE: 'true';
FALSE: 'false';
BOOL: 'bool';
INT: 'int';
FLOAT: 'float';
VOID: 'void';
COMMA: ',';
DOT: '.';
COLON: ':';
PARENTHES_LEFT: '(';
PARENTHES_RIGHT: ')';
BRACKET_LEFT: '[';
BRACKET_RIGHT: ']';
BRACE_LEFT: '{';
BRACE_RIGHT: '}';
IDENTIFIER: IDENTIFIER_START (IDENTIFIER_START | DIGIT)*;
NODE: '$' (LOWER_CASE | UPPER_CASE | DIGIT | '/')*;
MINUS: '-';
NUMBER_FLOATING: MINUS? DIGIT+ '.'? (DIGIT+)? ('e' '-'? DIGIT+)?;
NUMBER_BINARY: '0b' ('0' | '1')+;
NUMBER_HEXADECIMAL: '0x' (DIGIT | 'A'..'F')+;
STRING: '"' (~["\n])* '"';
STRING_APHOSTROPHE: '\'' (~['\n])* '\'';
STRING_MULTILINE: '"""' .*? '"""';
LINE_COMMENT: '#' ~[\r\n\f]*;
fragment IDENTIFIER_START: LOWER_CASE | UPPER_CASE | '_';
fragment LOWER_CASE: 'a'..'z';
fragment UPPER_CASE: 'A'..'Z';
fragment DIGIT: '0'..'9';

NL: '\n';
WHITESPACE: (' ' | '\t')+ -> channel(HIDDEN);
ERRCHAR: . -> channel(HIDDEN);
